/** * * ━━━━━━神兽出没━━━━━━ * 　　　┏┓　　　┏┓ * 　　┏┛┻━━━┛┻┓ * 　　┃　　　　　　　┃ * 　　┃　　　━　　　┃ * 　　┃　┳┛　┗┳　┃ * 　　┃　　　　　　　┃ * 　　┃　　　┻　　　┃ * 　　┃　　　　　　　┃ * 　　┗━┓　　　┏━┛Code is far away from bug with the animal protecting * 　　　　┃　　　┃    神兽保佑,代码无bug * 　　　　┃　　　┃ * 　　　　┃　　　┗━━━┓ * 　　　　┃　　　　　　　┣┓ * 　　　　┃　　　　　　　┏┛ * 　　　　┗┓┓┏━┳┓┏┛ * 　　　　　┃┫┫　┃┫┫ * 　　　　　┗┻┛　┗┻┛ * * ━━━━━━感觉萌萌哒━━━━━━ * by larsonzhong@163.com */package com.larson.album.app;import android.app.Application;import android.content.Context;import com.larson.album.util.FileUtils;import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;import com.nostra13.universalimageloader.cache.memory.impl.WeakMemoryCache;import com.nostra13.universalimageloader.core.DisplayImageOptions;import com.nostra13.universalimageloader.core.ImageLoader;import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;import com.nostra13.universalimageloader.core.assist.QueueProcessingType;import com.nostra13.universalimageloader.core.download.BaseImageDownloader;import java.io.File;import java.util.ArrayList;/** * * Created by larsonzhong on 2017/6/28. */public class MyApplication extends Application {    public static Context getContext() {        return context;    }    static Context context;    public static ArrayList<File> SourceList ;    @Override    public void onCreate() {        super.onCreate();        context = getApplicationContext();        SourceList = FileUtils.getMediaSourcePath();        initImageLoader();    }    private void initImageLoader() {//        File cacheDir = StorageUtils.getOwnCacheDirectory(getApplicationContext(), "imageloader/Cache");        ImageLoaderConfiguration config = new ImageLoaderConfiguration                .Builder(getApplicationContext())                .memoryCacheExtraOptions(800, 800) // max width, max height，即保存的每个缓存文件的最大长宽                .threadPoolSize(5)//线程池内加载的数量                .threadPriority(Thread.NORM_PRIORITY - 2)                .denyCacheImageMultipleSizesInMemory()                .memoryCache(new WeakMemoryCache()) // You can pass your own memory cache implementation/你可以通过自己的内存缓存实现                .memoryCacheSize(2 * 1024 * 1024)                .discCacheSize(50 * 1024 * 1024)                .discCacheFileNameGenerator(new Md5FileNameGenerator())//将保存的时候的URI名称用MD5 加密                .tasksProcessingOrder(QueueProcessingType.LIFO)                .discCacheFileCount(100) //缓存的文件数量//                .discCache(new UnlimitedDiscCache(cacheDir))//自定义缓存路径                .defaultDisplayImageOptions(DisplayImageOptions.createSimple())                .imageDownloader(new BaseImageDownloader(getApplicationContext(), 5 * 1000, 30 * 1000)) // connectTimeout (5 s), readTimeout (30 s)超时时间                .writeDebugLogs() // Remove for release app                .build();//开始构建        // Initialize ImageLoader with configuration.        ImageLoader.getInstance().init(config);    }}